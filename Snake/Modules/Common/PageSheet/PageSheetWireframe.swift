//
//  PageSheetWireframe.swift
//  Snake
//
//  Created by Zvonimir Medak on 20.06.2022..
//  Copyright (c) 2022 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the üêç VIPER generator
//

import UIKit
import Combine
import CombineExt

final class PageSheetWireframe: BaseWireframe<PageSheetViewController> {

    // MARK: - Private properties -

    private let storyboard = UIStoryboard.pageSheet

    private var transitionDelegate: TransitioningDelegate?
    private var interactionController: PageSheetInteractionController?

    // MARK: - Module setup -

    init(input: PageSheet.Input) {
        let moduleViewController = storyboard.instantiateViewController(ofType: PageSheetViewController.self)
        super.init(viewController: moduleViewController)

        let interactor = PageSheetInteractor(input: input)
        let presenter = PageSheetPresenter(view: moduleViewController, interactor: interactor, wireframe: self)
        moduleViewController.presenter = presenter

        interactionController = .init(viewController: moduleViewController)
        transitionDelegate = .init(interactionController: interactionController)
        viewController.transitioningDelegate = transitionDelegate
        viewController.modalPresentationStyle = .custom
    }
}

// MARK: - Extensions -

extension PageSheetWireframe: PageSheetWireframeInterface {
}

// MARK: - Transitioning delegate

private extension PageSheetWireframe {

    final class TransitioningDelegate: NSObject, UIViewControllerTransitioningDelegate {

        // MARK: - Private properties -

        private weak var interactionController: PageSheetInteractionController?

        // MARK: - Init -

        init(interactionController: PageSheetInteractionController?) {
            self.interactionController = interactionController
        }

        // MARK: - Transitioning delegate conformance

        func presentationController(
            forPresented presented: UIViewController,
            presenting: UIViewController?,
            source: UIViewController
        ) -> UIPresentationController? {
            let presentationController = PageSheetPresentationController(presentedViewController: presented, presenting: presenting)
            return presentationController
        }

        func animationController(
            forPresented presented: UIViewController,
            presenting: UIViewController,
            source: UIViewController
        ) -> UIViewControllerAnimatedTransitioning? {
            return PageSheetAnimationController(isPresenting: true, viewController: presenting)
        }

        func animationController(forDismissed dismissed: UIViewController) -> UIViewControllerAnimatedTransitioning? {
            return PageSheetAnimationController(isPresenting: false, viewController: dismissed)
        }

        func interactionControllerForDismissal(using animator: UIViewControllerAnimatedTransitioning) -> UIViewControllerInteractiveTransitioning? {
            guard let interactionController = interactionController,
                  interactionController.shouldUseInteractiveTransition,
                  interactionController.isInteractionInProgress
            else { return nil }
            return interactionController
        }
    }
}
