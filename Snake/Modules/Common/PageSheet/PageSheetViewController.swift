//
//  PageSheetViewController.swift
//  Snake
//
//  Created by Zvonimir Medak on 20.06.2022..
//  Copyright (c) 2022 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the üêç VIPER generator
//

import UIKit
import Combine
import CombineExt
import CombineCocoa

final class PageSheetViewController: UIViewController {

    // MARK: - IBOutlets -

    @IBOutlet private weak var contentStackView: UIStackView!
    @IBOutlet private weak var containerView: UIView!


    // MARK: - Public properties -

    var presenter: PageSheetPresenterInterface!

    // MARK: - Private properties -

    private var cancellables: Set<AnyCancellable> = []

    // MARK: - Lifecycle -

    override func viewDidLoad() {
        super.viewDidLoad()
        setupView()
    }
}

// MARK: - Extensions -

extension PageSheetViewController: PageSheetViewInterface {
}

// MARK: - View setup

private extension PageSheetViewController {

    func setupView() {
        setupUI()

        let output = PageSheet.ViewOutput()

        let input = presenter.configure(with: output)

        handle(configurators: input.configurators)
    }
}

// MARK: - UI setup

private extension PageSheetViewController {

    func setupUI() {
        containerView.roundCorners(corners: [.topLeft, .topRight], radius: 16)
    }
}

// MARK: - Handlers

private extension PageSheetViewController {

    func handle(configurators: [ComponentConfigurable]) {
        var height: CGFloat = 0
        let componentConfigurationHandler: (ComponentConfigurable) -> Void = { [unowned self] configurator in
            let view = configurator.view
            contentStackView.addArrangedSubview(view)
            height += view.frame.height
        }
        configurators.forEach(componentConfigurationHandler)

        let containerSize = containerView.systemLayoutSizeFitting(UIView.layoutFittingExpandedSize)
        // Needed for the custom transition, which uses the property to determine the height of the controller
        preferredContentSize = CGSize(width: containerSize.width, height: containerSize.height + height)
    }
}
