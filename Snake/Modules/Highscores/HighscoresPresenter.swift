//
//  HighscoresPresenter.swift
//  Snake
//
//  Created by Zvonimir Medak on 21.06.2022..
//  Copyright (c) 2022 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the üêç VIPER generator
//

import Foundation
import Combine
import CombineExt

final class HighscoresPresenter {

    // MARK: - Private properties -

    private unowned let view: HighscoresViewInterface
    private let interactor: HighscoresInteractorInterface
    private let wireframe: HighscoresWireframeInterface

    private var cancellables: Set<AnyCancellable> = []

    // MARK: - Lifecycle -

    init(
        view: HighscoresViewInterface,
        interactor: HighscoresInteractorInterface,
        wireframe: HighscoresWireframeInterface
    ) {
        self.view = view
        self.interactor = interactor
        self.wireframe = wireframe
    }
}

// MARK: - Extensions -

extension HighscoresPresenter: HighscoresPresenterInterface {

    func configure(with output: Highscores.ViewOutput) -> Highscores.ViewInput {
        let sections = makeSections()

        handle(backAction: output.backAction)

        return Highscores.ViewInput(sections: sections)
    }
}

// MARK: - Configuration

private extension HighscoresPresenter {

    func makeSections() -> Driver<[TableSectionItem]> {
        let userItemBuilder: ([UserModel]) -> [TableSectionItem] = { userData in
            guard !userData.isEmpty else { return [] }
            let items = userData.map(HighscoreTableCellItem.init)
            return [BlankTableSection(items: items)]
        }
        return interactor
            .getHighscores()
            .map(userItemBuilder)
            .handleLoadingAndError(with: wireframe)
            .asDriverOnErrorComplete()
    }
}

// MARK: - Handlers

private extension HighscoresPresenter {

    func handle(backAction: Signal<Void>) {
        backAction
            .sink(receiveValue: { [unowned wireframe] in wireframe.navigateToHome() })
            .store(in: &cancellables)
    }
}
