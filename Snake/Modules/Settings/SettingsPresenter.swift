//
//  SettingsPresenter.swift
//  Snake
//
//  Created by Zvonimir Medak on 20.06.2022..
//  Copyright (c) 2022 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the üêç VIPER generator
//

import Foundation
import Combine
import CombineExt

final class SettingsPresenter {

    typealias SelectedSetting = PickerView.SelectedButton

    // MARK: - Private properties -

    private unowned let view: SettingsViewInterface
    private let interactor: SettingsInteractorInterface
    private let wireframe: SettingsWireframeInterface

    private var cancellables: Set<AnyCancellable> = []

    // MARK: - Lifecycle -

    init(
        view: SettingsViewInterface,
        interactor: SettingsInteractorInterface,
        wireframe: SettingsWireframeInterface
    ) {
        self.view = view
        self.interactor = interactor
        self.wireframe = wireframe
    }
}

// MARK: - Extensions -

extension SettingsPresenter: SettingsPresenterInterface {

    func configure(with output: Settings.ViewOutput) -> Settings.ViewInput {
        let selectedGameSpeedRelay = CurrentValueRelay<SelectedSetting>(handle(initialGameSpeed: interactor.gameSpeed))
        let selectedArenaSizeRelay = CurrentValueRelay<SelectedSetting>(handle(initialArenaSize: interactor.arenaSize))

        let viewConfiguration = Self.makeViewConfiguration(
            selectedGameSpeedRelay: selectedGameSpeedRelay,
            selectedArenaSizeRelay: selectedArenaSizeRelay
        )

        handle(rulesAction: output.rulesAction)
        handle(gameSpeed: selectedGameSpeedRelay.asDriver())
        handle(arenaSize: selectedArenaSizeRelay.asDriver())

        return Settings.ViewInput(viewConfiguration: viewConfiguration)
    }
}

private extension SettingsPresenter {

    static func makeViewConfiguration(
        selectedGameSpeedRelay: CurrentValueRelay<SelectedSetting>,
        selectedArenaSizeRelay: CurrentValueRelay<SelectedSetting>
    ) -> Settings.ViewConfiguration {
        let gameSpeedPickerItem = PickerViewItem(
            selectedButtonRelay: selectedGameSpeedRelay,
            title: "Choose game speed",
            configuration: .gameSpeed
        )
        let arenaSizePickerItem = PickerViewItem(
            selectedButtonRelay: selectedArenaSizeRelay,
            title: "Choose arena size",
            configuration: .arenaSize
        )
        return .init(gameSpeedPickerItem: gameSpeedPickerItem, arenaSizePickerItem: arenaSizePickerItem)
    }
}

// MARK: - Handlers

private extension SettingsPresenter {

    func handle(rulesAction: Signal<Void>) {
        let rulesConfigurationBuiler: () -> [ComponentConfigurable] = {
            return [LabelConfigurator(text: "As a player, you have to keep the snake inside the arena at all times, in case you try to leave the arena the game will be over and you will be able to save your final result. One other way to end the game is to bite the body of the sanke with it's head. You control the snake by swiping left/right/up/down on your screen and based on the orientation of your camera and the sanke the snake will turn. The sanke can only turn left or right so take that into account when playing the game. While playing the game you want to score as many points as possible and you score points by collecting coins which will appear inside the arena. Depending on the parameters you choose before the game, the value of the coin will differ. If you choose a higher speed of the game, the coin will be worth more than if the game is slower. Same goes for the arena size. If the size of the arena is smaller, you will get more points by collecting coins and less if you chose a larger arena.")]
        }
        rulesAction
            .map(rulesConfigurationBuiler)
            .selectionHapticFeedback()
            .sink(receiveValue: { [unowned wireframe] in wireframe.navigateToGameRules(configurators: $0) })
            .store(in: &cancellables)
    }

    func handle(initialGameSpeed: GameSpeed) -> SelectedSetting {
        switch initialGameSpeed {
        case .slow:
            return .first
        case .normal:
            return .second
        case .fast:
            return .third
        }
    }

    func handle(initialArenaSize: ArenaSize) -> SelectedSetting {
        switch initialArenaSize {
        case .small:
            return .first
        case .medium:
            return .second
        case .large:
            return .third
        }
    }

    func handle(arenaSize: Driver<SelectedSetting>) {
        let updateArenaSizeHandler: (SelectedSetting) -> Void = { [unowned interactor] setting in
            let arenaSize: ArenaSize
            switch setting {
            case .first:
                arenaSize = .small
            case .second:
                arenaSize = .medium
            case .third:
                arenaSize = .large
            }
            interactor.update(arenaSize: arenaSize)
        }
        arenaSize
            .sink(receiveValue: updateArenaSizeHandler)
            .store(in: &cancellables)
    }

    func handle(gameSpeed: Driver<SelectedSetting>) {
        let updateGameSpeedHandler: (SelectedSetting) -> Void = { [unowned interactor] setting in
            let gameSpeed: GameSpeed
            switch setting {
            case .first:
                gameSpeed = .slow
            case .second:
                gameSpeed = .normal
            case .third:
                gameSpeed = .fast
            }
            interactor.update(gameSpeed: gameSpeed)
        }
        gameSpeed
            .sink(receiveValue: updateGameSpeedHandler)
            .store(in: &cancellables)
    }
}
